require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:name => "tester",
     :password => "testing",
     :email => "test@testing.com"
    }
  end

  describe "GET index" do
    it "assigns all users as @users" do
      user = User.create! valid_attributes
      get :index
      assigns(:users).should eq([user])
    end
  end

  describe "GET show" do
    it "assigns the requested user as @user" do
      user = User.create! valid_attributes
      get :show, :id => user.id.to_s
      assigns(:user).should eq(user)
    end
  end

  describe "GET new" do
    it "should redirect to login (devise to create)" do
      get :new
      response.should redirect_to(new_user_session_path)
    end
  end

  describe "GET edit" do
    it "should fail when not logged in" do
      user = User.create! valid_attributes
      get :edit, :id => user.id.to_s
      assigns(:user).should be_nil
      response.should redirect_to(new_user_session_path)
    end

    it "assigns the requested user as @user" do
      sign_in get_admin_user
      user = User.create! valid_attributes
      get :edit, :id => user.id.to_s
      assigns(:user).should eq(user)
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "should fail when not logged in" do
        user = User.create! valid_attributes
        put :update, :id => user.id, :user => {'name' => 'foobar'}
        response.should redirect_to(new_user_session_path)
      end

      it "should fail when logged in as non-admin" do
        sign_in get_user
        user = User.create! valid_attributes
        user.should_receive(:update_attributes).never
        put :update, :id => user.id, :user => {'name' => 'foobar'}
        response.should redirect_to(root_url)
      end

      it "should allow self-updates" do
        user = get_user
        sign_in user
        User.any_instance.should_receive(:update_attributes).with({
          'name' => 'foobar'})
        put :update, :id => user.id, :user => {'name' => 'foobar'}
      end

      it "should prevent self-updates from adding achievements" do
        user = get_user
        sign_in user
        user.should_receive(:update_attributes).never
        put :update, :id => user.id, :user => {:achievement_ids => [1]}
      end

      it "updates the requested user" do
        sign_in get_admin_user
        user = User.create! valid_attributes
        User.any_instance.should_receive(:update_attributes).with({
          'name' => 'foobar'})
        put :update, :id => user.id, :user => {'name' => 'foobar'}
      end

      it "assigns the requested user as @user" do
        sign_in get_admin_user
        user = User.create! valid_attributes
        put :update, :id => user.id, :user => valid_attributes
        assigns(:user).should eq(user)
      end

      it "redirects to the user" do
        sign_in get_admin_user
        user = User.create! valid_attributes
        put :update, :id => user.id, :user => valid_attributes
        response.should redirect_to(user)
      end
    end

    describe "with invalid params" do
      it "assigns the user as @user" do
        sign_in get_admin_user
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, :id => user.id.to_s, :user => {}
        assigns(:user).should eq(user)
      end

      it "re-renders the 'edit' template" do
        sign_in get_admin_user
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, :id => user.id.to_s, :user => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "should fail when not logged in" do
      user = User.create! valid_attributes
      expect {
        delete :destroy, :id => user.id.to_s
      }.to change(User, :count).by(0)
      response.should redirect_to(new_user_session_path)
    end

    it "should fail when logged in as non-admin" do
      sign_in get_user
      user = User.create! valid_attributes
      expect {
        delete :destroy, :id => user.id.to_s
      }.to change(User, :count).by(0)
    end

    it "destroys the requested user" do
      sign_in get_admin_user
      user = User.create! valid_attributes
      expect {
        delete :destroy, :id => user.id.to_s
      }.to change(User, :count).by(-1)
    end

    it "redirects to the users list" do
      sign_in get_admin_user
      user = User.create! valid_attributes
      delete :destroy, :id => user.id.to_s
      response.should redirect_to(users_url)
    end
  end

end
